#!/bin/bash
iwddir="/var/lib/iwd"	
station="wlan0"
function dmenuopt () { echo '-i -c -l 10 -h 25 -nb #F0F0F0 -nf #777777 -sb #c0a4bb -sf #000000'
}	#Dmenu options, so as not to clutter the rest of the script. These are the options that I use, change them if you'd like
function passlogin () {
	pass="$(echo "" | dmenu $(dmenuopt) -p Password:)" || exit 0	#This is called when doing a user-entered passphrase. Exits the program if a null value is entered, as that means no password, user is probably trying to leave
	[[ $pass == "" ]] && exit 0		#Exits if [Enter] is pressed, thus selecting an empty character. different from null character
	iwctl station $station connect "$selname" --passphrase "$pass" --dont-ask && kill -43 $(pidof dwmblocks) || echo "Password incorrect, please try again" | dmenu $(dmenuopt)	#Attempts authentication, could run a script but that's optional, then exits, OR, if authentication failed, exits and gives error message
}
while :; do

	[[ -z $(iwctl station $station get-networks | grep '>') ]] && iwctl station $station scan		#Refreshes nearby network cache, only works properly when disconnected from network, not fixable

	nets=$(iwctl station $station get-networks)	#The backend of this script. Lists all networks nearby

	netsorted="" && con="" && concheck=""

	for x in $(seq $(grep -c '*' <<< "$nets")); do #For as many numbers as there are networks detected;

		[[ "$con" != "1" ]] && [[ "$(awk -v c=$((8+($x-1)*3)) '{ FS = " " ; RS = "" ; print $c }' <<< \"$nets\" | sed -r ':a;$!{N;s/\n//;ba;}; s/\x1B\[(1;30|0)m//g')" == '>' ]] && con=1        #If connection line (line that contains an extra field, a > to indicate a connection to the next network) hasn't been reached, and if this is the connection line, then con=1

		name=$(awk -v c=$((8+$con+($x-1)*3)) '{ FS = " " ; RS = "" ; print $c }' <<< "$nets" | sed -r ':a;$!{N;s/\n//;ba;}; s/\x1B\[(1;30|0)m//g')	#Finds name. Dependent on whether we've reached the connection line yet

		sec=$(awk -v c=$((9+$con+($x-1)*3)) '{ FS = " " ; RS = "" ; printf("%s",$c) }' <<< "$nets")	#Finds security

		str=" "	#Assumes strength is weak. If it gets changed later, it isn't weak.

		[[ "$(awk -v c=$((10+$con+($x-1)*3)) '{ FS = " " ; RS = "" ; print $c }' <<< "$nets" | sed -r ':a;$!{N;s/\n//;ba;}; s/\x1B\[1;30m\*{1,3}\x1B\[0m//g')" == '***' ]] && str=" "	#Sets connection symbol/string

		[[ "$(awk -v c=$((10+$con+($x-1)*3)) '{ FS = " " ; RS = "" ; print $c }' <<< "$nets" | sed -r ':a;$!{N;s/\n//;ba;}; s/\x1B\[1;30m\*{1,3}\x1B\[0m//g')" == '****' ]] && str=" "	#Same as before

		[[ "$x" != "1" ]] && netsorted="$netsorted\n"	#If this isn't the first line, add a separator.

		[[ "$con" == 1 ]] && [[ "$concheck" != "1" ]] && netsorted="$netsorted   $str $name   [ $sec ]" && concheck=1 || netsorted="$netsorted$str  $name   [ $sec ]"	#If we've reached the connection line, and we haven't already done this, add a check mark to the current line, and then add all of the info to the end of the sorted variable.

	done


	sel=$(echo -e "$netsorted" | dmenu $(dmenuopt)) || exit 0	#Allow user to select line (network)

	selname=$(awk '{ FS = " " ; print $2 }' <<< "$sel")	#Parses the selected name for future use

	selsec=$(awk '{ FS = " " ; print $4 }' <<< "$sel")	#Parses the selected security standard for future use 

	[[ "$(awk '{ FS = " " ; print $1 }' <<< "$sel")" == "" ]] && [[ "$(echo -e "N\nY" | dmenu $(dmenuopt) -p "Do you want to disconnect from your current network? [N/y]" | awk '{ print tolower($0) }')" == y ]] && iwctl station $station disconnect && killall -43 $(pidof dwmblocks)

	if [[ "$selsec" == "psk" ]] || [[ "$selsec" == wep ]]; then	#If the security standard is psk or wep;

		if [[ -f "$iwddir/$selname.psk" ]]; then	#If we have a saved password;

			if [[ "$(echo -e "Y\nN" | dmenu $(dmenuopt) -p "Use the saved password? [Y/n]" | awk '{ print tolower($0) }')" == "y" ]]	#If the user wants to use the saved password;

			then

				iwctl station $station connect "$selname" --dont-ask && kill -43 $(pidof dwmblocks) || echo "The saved password is incorrect" | dmenu $(dmenuopt)	#Connect!

			else

				passlogin	#Otherwise, login with user password

			fi

		else

			passlogin

		fi

	fi

	[[ "$selsec" == "open" ]] && iwctl station $station connect "$selname" && kill -43 $(pidof dwmblocks)	#Log in to network automatically if its open

done

echo "You have tried to connect to a network that isn't open, psk, or wep. Please file a bug report, thanks! :)" | dmenu $(dmenuopt) && exit 1		#debug message
